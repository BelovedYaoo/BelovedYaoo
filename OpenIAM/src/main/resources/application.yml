spring:
    main:
        # 是否输出banner
        banner-mode: off
    application:
        name: OpenIAM
    # 全局序列化配置
    jackson:
        # ALWAYS         默认策略，任何情况都执行序列化
        # NON_NULL       属性为NULL 不序列化
        # NON_ABSENT     null的不会序列化，但如果类型是AtomicReference，依然会被序列化
        # NON_EMPTY      null、集合数组等没有内容、空字符串等，都不会被序列化
        # NON_DEFAULT    如果字段是默认值，就不会被序列化
        # CUSTOM         此时要指定valueFilter属性，该属性对应一个类，用来自定义判断被JsonInclude修饰的字段是否序列化
        # USE_DEFAULTS   当JsonInclude在类和属性上都有时，优先使用属性上的注解，此时如果在序列化的get方法上使用了JsonInclude，并设置为USE_DEFAULTS，就会使用类注解的设置
        default-property-inclusion: non_empty
        # 设置日期格式
        date-format: yyyy-MM-dd HH:mm:ss
        time-zone: GMT+8


    redis:
        # Redis数据库索引（默认为0）
        database: 0
        # Redis服务器地址
        host: 127.0.0.1
        # Redis服务器连接端口
        port: 6379
        # Redis服务器连接密码（默认为空）
        password: belovedyaoo
        # 连接超时时间（单位：毫秒）
        timeout: 10000
        lettuce:
            pool:
                # 连接池最大连接数
                max-active: 20
                # 连接池最大阻塞等待时间（单位：毫秒）
                max-wait: 10000
                # 连接池中的最大空闲连接
                max-idle: 10
                # 连接池中的最小空闲连接
                min-idle: 0


# MyBatis-Flex
mybatis-flex:
    datasource:
        # 数据数据库
        primary:
            # 数据源类型
            type: com.mysql.cj.jdbc.MysqlDataSource
            # 数据库连接地址
            url: jdbc:mysql://localhost:3307/openiam
            # 数据库用户名 & 密码
            user: root
            password: root
    global-config:
        print-banner: false

mybatis-flex-ext:
    enable-auto-fill: false

server:
    # 应用服务 WEB 访问端口
    port: 8090


# Sa-Token配置
sa-token:
    # 是否输出banner
    is-print: false
    # jwt秘钥
    jwt-secret-key: belovedyaoo
    # token 名称（同时也是 cookie 名称）
    token-name: token
    # token 有效期（单位：秒） 当前设置为 1 天 (86400)，-1 代表永久有效
    timeout: 86400
    # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认 -1 代表不限制，永不冻结
    active-timeout: -1
    # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
    is-concurrent: false
    # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
    # 当前项目使用jwt-simple模式，is-share恒等于false，参考文档 https://sa-token.cc/doc.html#/plugin/jwt-extend
    is-share: false
    # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
    token-style: uuid
    # 是否输出操作日志
    is-log: false
    # OAuth2.0 配置
    oauth2-server:
        # 是否全局开启授权码模式
        enable-authorization-code: true
        # 是否全局开启 Implicit 模式
        enable-implicit: true
        # 是否全局开启密码模式
        enable-password: true
        # 是否全局开启客户端模式
        enable-client-credentials: true
        # 定义哪些 scope 是高级权限，多个用逗号隔开
        # higher-scope: openid,userid
        # 定义哪些 scope 是低级权限，多个用逗号隔开
        # lower-scope: userinfo

auto-table:
    # 是否开启自动建表功能
    enable: true
    # 是否输出banner
    show-banner: false
    # 是否开启严格继承模式
    strict-extends: false
    # 是否开启自动删除字段
    # auto-drop-column: true


security:
    publicKey: "30820122300d06092a864886f70d01010105000382010f003082010a0282010100c65efe3101c790bbea802fdad1bf2eb012dd0f15cc27f340be7ba5eef2e7d9c3207901298245efdbdf8224811ad1ffc21d6888d4157dd42d02cde42bc436c0df10eb8e2f9ca32ff4f756b1d977caac5655e8990d6cd7f22f88028afd012f25c218f01f96d9b3beae4c9681b783c06c759f3d5d3fbdd6fb3f373cb3a4ea2c94261a60803eed4d7b0ac9ccfe09be45b47aebf23a47b5dea8098fa92f7fe238aa40a97776745a8c59d62be9d608a6023a5eb4e66861d0dbca1d2ca65a56bc0c6058bcbb0d3c22c8a5d50c0fba95fbb9cde2d999277bb313c0e588a0bef82e97d46af67491ca1f0e0c774a7279c18852f3f42cb888d2afffd69acbeb613fb9c61f930203010001"
    privateKey: "308204be020100300d06092a864886f70d0101010500048204a8308204a40201000282010100c65efe3101c790bbea802fdad1bf2eb012dd0f15cc27f340be7ba5eef2e7d9c3207901298245efdbdf8224811ad1ffc21d6888d4157dd42d02cde42bc436c0df10eb8e2f9ca32ff4f756b1d977caac5655e8990d6cd7f22f88028afd012f25c218f01f96d9b3beae4c9681b783c06c759f3d5d3fbdd6fb3f373cb3a4ea2c94261a60803eed4d7b0ac9ccfe09be45b47aebf23a47b5dea8098fa92f7fe238aa40a97776745a8c59d62be9d608a6023a5eb4e66861d0dbca1d2ca65a56bc0c6058bcbb0d3c22c8a5d50c0fba95fbb9cde2d999277bb313c0e588a0bef82e97d46af67491ca1f0e0c774a7279c18852f3f42cb888d2afffd69acbeb613fb9c61f9302030100010282010100b0cec8478beb81104cd2165535efee4017801acaf5dd81cdea39b14b4a0be6a7299150bcdb955455a8608a02dc91e220f52f500da05e37b82ab0b2b763baddabb49c0f6e567188f411649f3e52ac3d70f23f4ff38c58e94efe2e2e0d95799d70e3e35a748cf3cd77f3618e9aaffed96cf912abc37d84590a1e44a765cd27109f56c62c06144dd3b1e3a218aa58bef3790ca6671a31df6406abda816dbc0e118cf150b5ed47c3b211aebb3698bd7638c03290eafd1e849807b060851ecd74ee6af7e5be06a07df91b3026b93dffdf9f6b3732cad465b84c29a048a0335c1b31652ef69ce16497eed841ac2d8fb956b8176d9135a317061c55215e38d9aab764b902818100f279009dfecdcd824e7d916b38c621685ba49d20b542dfff075867445b1cb3148b8d03f44429d8035aa3b3fd7436cbd3574764a123397d93feb5c610cff877fb8b7250e3d6fc98b24cb6447768c3472b16b00f509dc061b151633e990a72d13bab126bfaa4dec359f056514672fbdd67282e81fdf965a7279cee24aeea99b89702818100d1702185303ce9de937e51105ff80d037a70dc168a9f52af195fbe39dd59c2ff62676ca64e10cec4545b893d9dac13eebe6c573c82a8db77e12d87af57bef4c7c45117f972257e2df08023f03a4bd1a02d0c471661c6deff025cfcfb55d07bb9e346a4ad72e5215d2007b1def4446a9855c6c03b035a87f6c6c1b19dc2ff9465028180427f06b94da8b924744c21764b42a2e4d0c52b464e0f820899c617c3fa4cbb9bf5cd7d791ebc6efe347c529f3ea0cc73302b67207ddd855ff1e97de11c77e2c7bc6d645ba798ec73717047048c598989fa95dc0d5ac5e8c4cd322f779f12efe8b238c21e21dae9ae1fa83c6fda96d218393fcfec8bd9e1e68e360d1f5f3d3b0f028180281f4e1ca0d81a898c41f7afa662f3c345d297272e594552cc0e9e77a1630fcb3303d339acdce56f9125940e1cc5996ff444f7155d8691bcce839569ceea83243e04b70e0f83054031c1aaa0dbda288781f9c7288f84b4b5afb336b7c381d422115b38330e3ebcfc8525543afd1a9a3d22b9979bf6918258914d0c04c815844d02818100a73c0f63cd566f14b54e39cbf49f4be690907bd8efae54330f8b7df4d96b81c24a99dac2614a9849858c660399a4cf95ac6e4b1234ec5ea00c8fa81e511778902f8e6ba0621b8a5565c582edbda1dfee691b3fc2e1b0f94b56fa025cefde6fd8aae36898cbb3204359be2d6d2eb2f6cd22a1afaaed9c10d526b3b68e8b41d21b"