spring:
    main:
        # 是否输出banner
        banner-mode: off
    application:
        name: OpenIAM
    # 全局序列化配置
    jackson:
        # ALWAYS         默认策略，任何情况都执行序列化
        # NON_NULL       属性为NULL 不序列化
        # NON_ABSENT     null的不会序列化，但如果类型是AtomicReference，依然会被序列化
        # NON_EMPTY      null、集合数组等没有内容、空字符串等，都不会被序列化
        # NON_DEFAULT    如果字段是默认值，就不会被序列化
        # CUSTOM         此时要指定valueFilter属性，该属性对应一个类，用来自定义判断被JsonInclude修饰的字段是否序列化
        # USE_DEFAULTS   当JsonInclude在类和属性上都有时，优先使用属性上的注解，此时如果在序列化的get方法上使用了JsonInclude，并设置为USE_DEFAULTS，就会使用类注解的设置
        default-property-inclusion: non_empty
        # 设置日期格式
        date-format: yyyy-MM-dd HH:mm:ss
        time-zone: GMT+8


    redis:
        # Redis数据库索引（默认为0）
        database: 0
        # Redis服务器地址
        host: 127.0.0.1
        # Redis服务器连接端口
        port: 6379
        # Redis服务器连接密码（默认为空）
        password: belovedyaoo
        # 连接超时时间（单位：毫秒）
        timeout: 10000
        lettuce:
            pool:
                # 连接池最大连接数
                max-active: 20
                # 连接池最大阻塞等待时间（单位：毫秒）
                max-wait: 10000
                # 连接池中的最大空闲连接
                max-idle: 10
                # 连接池中的最小空闲连接
                min-idle: 0


# MyBatis-Flex
mybatis-flex:
    datasource:
        # 数据数据库
        primary:
            # 数据源类型
            type: com.mysql.cj.jdbc.MysqlDataSource
            # 数据库连接地址
            url: jdbc:mysql://localhost:3307/openiam
            # 数据库用户名 & 密码
            user: root
            password: root
    global-config:
        print-banner: false

mybatis-flex-ext:
    enable-auto-fill: false

server:
    # 应用服务 WEB 访问端口
    port: 8090


# Sa-Token配置
sa-token:
    # 是否输出banner
    is-print: false
    # jwt秘钥
    jwt-secret-key: belovedyaoo
    # token 名称（同时也是 cookie 名称）
    token-name: token
    # token 有效期（单位：秒） 当前设置为 1 天 (86400)，-1 代表永久有效
    timeout: 86400
    # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认 -1 代表不限制，永不冻结
    active-timeout: -1
    # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
    is-concurrent: false
    # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
    # 当前项目使用jwt-simple模式，is-share恒等于false，参考文档 https://sa-token.cc/doc.html#/plugin/jwt-extend
    is-share: false
    # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
    token-style: uuid
    # 是否输出操作日志
    is-log: false
    # OAuth2.0 配置
    oauth2-server:
        # 是否全局开启授权码模式
        enable-authorization-code: true
        # 是否全局开启 Implicit 模式
        enable-implicit: true
        # 是否全局开启密码模式
        enable-password: true
        # 是否全局开启客户端模式
        enable-client-credentials: true
        # 定义哪些 scope 是高级权限，多个用逗号隔开
        # higher-scope: openid,userid
        # 定义哪些 scope 是低级权限，多个用逗号隔开
        # lower-scope: userinfo

auto-table:
    # 是否开启自动建表功能
    enable: true
    # 是否输出banner
    show-banner: false
    # 是否开启严格继承模式
    strict-extends: false
    # 是否开启自动删除字段
    # auto-drop-column: true


security:
    publicKey: "30820122300d06092a864886f70d01010105000382010f003082010a02820101009db156bc6b2fb3d94ff38823c1ab22e2a0c6e40dc78ffd308e344d08211deabd842be928539380990b00f54d6969924ccbb1691d40d6947cfef26c2b48387ea183ce61ace4b8ff855d071bdebdf4a5c01d0ba8535879ba0f38a56c7324934a127deaf7d95c43dc1947b78c2abb5bdae2512033a11fc288b67ad74ee3a4e51cee5c4c1ce4049cc593c375545dd45af1b4dd06e43207cb3c07300b4e633fe3ec9cd4a43c4b53250f96d0a20d45bae16ba17d91606de5be27564dbec40d6319b067ce6fdb2318e96c472d05bc9cf509098b82ac43cd0708d1dfedbdd2b400837b71edd7a252bd3e60e12ca96772650c996fb7084e0ee3256393d79b7f8529dbca870203010001"
    privateKey: "308204bc020100300d06092a864886f70d0101010500048204a6308204a20201000282010100c95c21f4f7b5db220fc3d237868ac70aec3d77a9438761953a3e2fc2d85e6e8f4b78648c2c98606825dbdb50d98283eef1898d6371da74ceda510c6b26bd71ed896bb5269e8e708183361a8e53b7db52b762d5b005e0b7aace1a3f4972b27c083637e1facffc1488de786fe5db2ae9b611131cf1fd6e07f6dbe332b96fce992a05437a6c736e578bda63257aaa7d227ef2206f8a936a17e04e7bf4ddaab571a8ef8abe75c632d587db0de33b092cc997580362bdb529cb0ec4794b55e5fb132b817a4814c1a4b79e96322958cb070dda87bab239a5a0be1d0fcc14a7ea66eb9e975a4894c10ba0371fa1fa5a93591ab1e433970338df535d77f1ae85a1c2716702030100010282010002b29749dedfb2d5dbfc359ec4d0ab25fc503e802805724b3b8285c5487ccb62641272d665ea8cb01881bf886fc18ddeefa1762174ef064d97232ad56ca971134b9a03cd46a685df5650ad3e66e4b9ad7c0378f568bebff72bd7b22d5bba046b5fbe93ea764adc4391276fe8566d56c037ae57deee14414b0f5b15dce2209470b38d4b84b09f7d2422b29fb3e0899ff28d5840f57383d35c6e144d3592c57211e926e3d9cafe2ed095c4509f0757edb2fdb3418712e8e9d35f05d7cd5305216effc13f35a0e33fa8746100b57aad127603ec047bea0f18911539c6d610c7b5bf72af8bfc8d0e4cf0c42a8ce3521b2b369ad94ebbc6050486bb45c1f8466114e102818100ff3f296ab28b2b4d707abb039750d9d08e5ec15c1d179c2a5c08a16c10acf0a83f684a649e68d49711440f190d7315e859489867423ad7a2082d7cf2c5e65f9f7a9b5c9200bdece33d3418b75d3557dd015d626c6e5aa6649babfdc96128ff9b6d2bbc5b1384a1095aa867f2058f458b4861769aa0fade168b447437f8d8665f02818100c9f4426ec295aefa3b9e3d6ac242e2945ac641cd85b1dd056af2a89e82690f7a3570e2aa46b3e679a8496c864b564373b0843335150d0f552992b58e09c9ed3d8a01a09cf776160b3a3e7a09fdb1e3bdd9be940c9ec75e3a8e1dbd1c7610486501a7a5459eb35117498c3779c220eb60525ec93479569856ba623920a7ef81f902818031e41caa585fcf8501795bd8a5d90dda3019e15da9ea15824a1efdbe6bbc020640ee97abf732b26b1cdadac0a0da5febdc97ce0250f5c3744e78e5b5666d533f8eed93388ea0910f11c57f174846c6f7d1ee78f08cd97730af24fd2441b38bd2cb9202ed2271883095e1d8ff7b8ab7a333f0a9082c731cb9f75ad804a0c55bad028180182f0fe58397b9246e0f3cfb93d7be9a5564786ccc1dc881e594b96c81e162e11795350f7ef7fc19857585716f841cffb59b9f2634272436e68b93023759def70797ba4c11b62a5d9dd3ed7954d0009db37d86ed1bf673ea3f2a8082f000732ae54fd612c83660f790ef21958b11b61e0abf1f09119eb50f6db26574eba75ac10281801056d1710091e9939d5860bdad0bcd2e89e6f38e0e3157e1b5f0d690545f476edfc96a75ededcaf9f99bb911f0d5bf30315b494b9af01d6a0b621494d3c947edb74db73b9451d992c7f735ce7bdbd87c45e78734b4da044235c6d8bc7ec9e88536349197e3c319f3ad1959e1a2a1ed1b9ad2aa4a871ba8d1d4eebd1f5112beae"